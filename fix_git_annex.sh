#!/bin/bash

<<<<<<< HEAD
# Script para diagnosticar e corrigir problemas do Git Annex com FastSurfer
# Uso: ./fix_git_annex.sh

echo "Verificando status do Git Annex..."

# Verificar se estamos em um reposit√≥rio Git Annex
if ! git annex version &>/dev/null; then
    echo "Este n√£o √© um reposit√≥rio Git Annex"
    exit 1
fi

echo "Reposit√≥rio Git Annex detectado"

# Verificar status do annex
echo
echo "STATUS ATUAL DO GIT ANNEX:"
git annex info 2>/dev/null | head -10

echo
echo "VERIFICANDO ARQUIVOS T1.MGZ:"

# Encontrar arquivos T1.mgz (devem ser links simb√≥licos no Git Annex)
T1_FILES=$(find . -name "T1.mgz" -type l 2>/dev/null)

if [ -z "$T1_FILES" ]; then
    echo "Nenhum arquivo T1.mgz (link simb√≥lico) encontrado"
    exit 1
fi

echo "Arquivos T1.mgz encontrados:"
echo "$T1_FILES" | head -5

echo
echo "ANALISANDO PRIMEIRO ARQUIVO:"
FIRST_T1=$(echo "$T1_FILES" | head -1)
echo "Arquivo: $FIRST_T1"

# Verificar se o arquivo est√° no annex
echo "Status no Git Annex:"
if git annex find "$FIRST_T1" &>/dev/null; then
    echo "Arquivo est√° rastreado pelo Git Annex"
else
    echo "Arquivo n√£o est√° no Git Annex ou h√° problema"
fi

# Verificar onde o arquivo est√°
git annex whereis "$FIRST_T1" 2>/dev/null || echo "Arquivo n√£o rastreado pelo Git Annex"

echo
echo "OP√á√ïES DE CORRE√á√ÉO:"
echo "1. unlock - Converte links simb√≥licos em arquivos regulares"
echo "2. get - Baixa arquivos do reposit√≥rio remoto (se dispon√≠vel)"
echo "3. lock - Converte arquivos regulares de volta para links simb√≥licos"
echo "0. Sair"

read -p "Digite sua op√ß√£o (0-3): " opcao

case $opcao in
    1)
        echo "Realizando unlock dos arquivos T1.mgz..."
        echo "Isso pode demorar alguns minutos..."
        
        unlocked_count=0
        while IFS= read -r t1_file; do
            echo "Processando: $t1_file"
            if git annex unlock "$t1_file" 2>/dev/null; then
                if [ ! -L "$t1_file" ]; then
                    echo "  Unlock realizado com sucesso"
                    unlocked_count=$((unlocked_count + 1))
                    
                    echo "  Arquivo convertido para regular"
                    echo "  Tamanho: $(du -h "$t1_file" | cut -f1)"
                else
                    echo "  Ainda √© link simb√≥lico"
                fi
            else
                echo "  Falha no unlock"
            fi
        done <<< "$T1_FILES"
        
        echo "UNLOCK CONCLU√çDO!"
        echo "Agora os arquivos T1.mgz s√£o arquivos regulares"
        echo "Teste o FastSurfer novamente: ./test_fastsurfer_annex.sh"
        ;;
    
    2)
        echo "Tentando baixar arquivos do reposit√≥rio remoto..."
        echo "Isso pode demorar bastante dependendo do tamanho..."
        
        while IFS= read -r t1_file; do
            echo "Baixando: $t1_file"
            if git annex get "$t1_file" 2>/dev/null; then
                echo "  Download realizado com sucesso"
            else
                echo "  Falha no download (pode n√£o estar dispon√≠vel remotamente)"
            fi
        done <<< "$T1_FILES"
        
        echo "DOWNLOAD CONCLU√çDO!"
        echo "Arquivos baixados (se dispon√≠veis)"
        echo "Teste o FastSurfer novamente: ./test_fastsurfer_annex.sh"
        ;;
    
    3)
        echo "Realizando lock dos arquivos T1.mgz..."
        echo "Convertendo arquivos regulares para links simb√≥licos..."
        
        while IFS= read -r t1_file; do
            echo "Processando: $t1_file"
            if git annex lock "$t1_file" 2>/dev/null; then
                echo "  Lock realizado com sucesso"
            else
                echo "  Falha no lock"
            fi
        done <<< "$T1_FILES"
        
        echo "LOCK CONCLU√çDO!"
        ;;
    
    0)
        echo "Op√ß√£o inv√°lida"
=======
echo "=== Corre√ß√£o Git Annex - Unlock dos Arquivos T1 ==="

# Configura√ß√µes
DATA_BASE="/app/alzheimer/oasis_data"

echo "üîç Verificando status do Git Annex..."

# Verificar se estamos em um reposit√≥rio Git Annex
if [ ! -d "/app/alzheimer/.git/annex" ]; then
    echo "‚ùå Este n√£o √© um reposit√≥rio Git Annex"
    exit 1
fi

echo "‚úÖ Reposit√≥rio Git Annex detectado"

# Navegar para o diret√≥rio raiz
cd /app/alzheimer

echo ""
echo "üìä STATUS ATUAL DO GIT ANNEX:"
git annex status | head -10

echo ""
echo "üîç VERIFICANDO ARQUIVOS T1.MGZ:"

# Encontrar todos os arquivos T1.mgz
T1_FILES=$(find "$DATA_BASE" -name "T1.mgz" -type l | head -5)

if [ -z "$T1_FILES" ]; then
    echo "‚ùå Nenhum arquivo T1.mgz (link simb√≥lico) encontrado"
    exit 1
fi

echo "‚úÖ Arquivos T1.mgz encontrados:"
echo "$T1_FILES"

echo ""
echo "üìã ANALISANDO PRIMEIRO ARQUIVO:"
FIRST_T1=$(echo "$T1_FILES" | head -1)
echo "üìÅ Arquivo: $FIRST_T1"

# Verificar informa√ß√µes do arquivo
echo "üîó Link aponta para: $(readlink "$FIRST_T1")"
echo "üìÑ Arquivo real: $(readlink -f "$FIRST_T1")"

# Verificar onde est√° o arquivo no Git Annex
echo ""
echo "üåê LOCALIZA√á√ÉO NO GIT ANNEX:"
git annex whereis "$FIRST_T1" 2>/dev/null || echo "‚ö†Ô∏è  Arquivo n√£o rastreado pelo Git Annex"

echo ""
echo "üîß OP√á√ïES DE CORRE√á√ÉO:"
echo ""
echo "1. üîì UNLOCK (Converter links em arquivos regulares)"
echo "2. üì• GET (Baixar arquivos do reposit√≥rio remoto)"
echo "3. üîí LOCK (Converter de volta para links)"

echo ""
read -p "Escolha uma op√ß√£o (1-3): " opcao

case $opcao in
    1)
        echo ""
        echo "üîì FAZENDO UNLOCK DOS ARQUIVOS T1.MGZ..."
        
        # Contador
        count=0
        total=$(echo "$T1_FILES" | wc -l)
        
        echo "$T1_FILES" | while read -r t1_file; do
            count=$((count + 1))
            echo "[$count/$total] Processando: $t1_file"
            
            # Fazer unlock do arquivo
            if git annex unlock "$t1_file"; then
                echo "  ‚úÖ Unlock realizado com sucesso"
                
                # Verificar se agora √© arquivo regular
                if [ ! -L "$t1_file" ]; then
                    echo "  ‚úÖ Arquivo convertido para regular"
                    echo "  üìä Tamanho: $(du -h "$t1_file" | cut -f1)"
                else
                    echo "  ‚ö†Ô∏è  Ainda √© link simb√≥lico"
                fi
            else
                echo "  ‚ùå Falha no unlock"
            fi
            echo ""
        done
        
        echo "üéâ UNLOCK CONCLU√çDO!"
        echo "üí° Agora os arquivos T1.mgz s√£o arquivos regulares"
        echo "üöÄ Teste o FastSurfer novamente: ./test_fastsurfer_annex.sh"
        ;;
        
    2)
        echo ""
        echo "üì• BAIXANDO ARQUIVOS DO REPOSIT√ìRIO REMOTO..."
        
        # Tentar baixar os arquivos
        echo "$T1_FILES" | while read -r t1_file; do
            echo "üì• Baixando: $t1_file"
            
            if git annex get "$t1_file"; then
                echo "  ‚úÖ Download realizado com sucesso"
            else
                echo "  ‚ùå Falha no download (pode n√£o estar dispon√≠vel remotamente)"
            fi
        done
        
        echo "üéâ DOWNLOAD CONCLU√çDO!"
        echo "üí° Arquivos baixados (se dispon√≠veis)"
        echo "üöÄ Teste o FastSurfer novamente: ./test_fastsurfer_annex.sh"
        ;;
        
    3)
        echo ""
        echo "üîí FAZENDO LOCK DOS ARQUIVOS (converter para links)..."
        
        echo "$T1_FILES" | while read -r t1_file; do
            echo "üîí Processando: $t1_file"
            
            if git annex lock "$t1_file"; then
                echo "  ‚úÖ Lock realizado com sucesso"
            else
                echo "  ‚ùå Falha no lock"
            fi
        done
        
        echo "üéâ LOCK CONCLU√çDO!"
        ;;
        
    *)
        echo "‚ùå Op√ß√£o inv√°lida"
>>>>>>> 3f8bd3ee87 (Add new processing scripts and documentation)
        exit 1
        ;;
esac

<<<<<<< HEAD
echo
echo "STATUS FINAL:"
echo "Verificando primeiro arquivo ap√≥s corre√ß√£o:"
echo "Arquivo: $FIRST_T1"

if [ -L "$FIRST_T1" ]; then
    echo "Tipo: Link simb√≥lico"
    echo "Aponta para: $(readlink "$FIRST_T1")"
else
    echo "Tipo: Arquivo regular"
    echo "Tamanho: $(du -h "$FIRST_T1" | cut -f1)"
fi

echo
echo "PR√ìXIMOS PASSOS:"
echo "1. Execute: ./test_fastsurfer_annex.sh"
echo "2. Se ainda der erro, tente: git annex fsck"
echo "3. Para mais diagn√≥sticos: git annex info" 
=======
echo ""
echo "üìä STATUS FINAL:"
echo "üîç Verificando primeiro arquivo ap√≥s corre√ß√£o:"
echo "üìÅ Arquivo: $FIRST_T1"

if [ -L "$FIRST_T1" ]; then
    echo "üîó Ainda √© link simb√≥lico"
    echo "üéØ Aponta para: $(readlink "$FIRST_T1")"
else
    echo "üìÑ Agora √© arquivo regular"
    echo "üìä Tamanho: $(du -h "$FIRST_T1" | cut -f1)"
fi

echo ""
echo "üöÄ PR√ìXIMOS PASSOS:"
echo "1. Testar FastSurfer: ./test_fastsurfer_annex.sh"
echo "2. Se funcionar, processar todos: ./run_fastsurfer_oficial.sh"
echo ""
echo "=== FIM DA CORRE√á√ÉO GIT ANNEX ===" 
>>>>>>> 3f8bd3ee87 (Add new processing scripts and documentation)
