#!/bin/bash

# SCRIPT DE VERIFICA√á√ÉO PR√âVIA PARA REORGANIZA√á√ÉO
# Verifica se a reorganiza√ß√£o pode ser feita com seguran√ßa

echo "VERIFICA√á√ÉO PR√âVIA PARA REORGANIZA√á√ÉO"
echo "===================================="
echo

# Verificar se estamos no diret√≥rio correto
if [ ! -f "alzheimer_analysis_suite.sh" ]; then
    echo "‚ùå ERRO: Execute este script do diret√≥rio raiz do projeto"
    echo "   Diret√≥rio atual: $(pwd)"
    exit 1
fi

echo "‚úÖ Diret√≥rio correto detectado"

# Verificar arquivos cr√≠ticos
echo
echo "Verificando arquivos cr√≠ticos..."

critical_files=(
    "alzheimer_analysis_suite.sh"
    "openai_fastsurfer_analyzer.py"
    "config_openai.py"
    "alzheimer_cnn_pipeline.py"
    "mci_detection_cnn_optimized.py"
    "alzheimer_early_diagnosis_analysis.py"
    "mci_clinical_insights.py"
    "dataset_explorer.py"
)

missing_files=()
for file in "${critical_files[@]}"; do
    if [ -f "$file" ]; then
        echo "  ‚úÖ $file"
    else
        echo "  ‚ùå $file (N√ÉO ENCONTRADO)"
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -gt 0 ]; then
    echo
    echo "‚ö†Ô∏è  ATEN√á√ÉO: Alguns arquivos cr√≠ticos n√£o foram encontrados:"
    for file in "${missing_files[@]}"; do
        echo "   - $file"
    done
    echo
    echo "Isso pode indicar que a reorganiza√ß√£o j√° foi feita ou h√° problemas."
    read -p "Deseja continuar mesmo assim? (s/n): " -r
    if [[ ! $REPLY =~ ^[Ss]$ ]]; then
        echo "Reorganiza√ß√£o cancelada."
        exit 1
    fi
fi

# Verificar espa√ßo em disco
echo
echo "Verificando espa√ßo em disco..."
available_space=$(df . | awk 'NR==2 {print $4}')
available_gb=$((available_space / 1024 / 1024))

echo "  Espa√ßo dispon√≠vel: ${available_gb}GB"

if [ $available_gb -lt 5 ]; then
    echo "  ‚ö†Ô∏è  ATEN√á√ÉO: Pouco espa√ßo em disco (menos de 5GB)"
    read -p "Deseja continuar mesmo assim? (s/n): " -r
    if [[ ! $REPLY =~ ^[Ss]$ ]]; then
        echo "Reorganiza√ß√£o cancelada."
        exit 1
    fi
else
    echo "  ‚úÖ Espa√ßo suficiente dispon√≠vel"
fi

# Verificar se h√° processos em execu√ß√£o
echo
echo "Verificando processos em execu√ß√£o..."
running_processes=$(pgrep -f "python.*alzheimer\|fastsurfer\|tensorboard" | wc -l)

if [ $running_processes -gt 0 ]; then
    echo "  ‚ö†Ô∏è  ATEN√á√ÉO: Encontrados $running_processes processos relacionados em execu√ß√£o"
    echo "  Processos encontrados:"
    pgrep -f "python.*alzheimer\|fastsurfer\|tensorboard" | xargs ps -p 2>/dev/null || echo "    (N√£o foi poss√≠vel listar detalhes)"
    echo
    read -p "Recomenda-se parar os processos antes da reorganiza√ß√£o. Continuar? (s/n): " -r
    if [[ ! $REPLY =~ ^[Ss]$ ]]; then
        echo "Reorganiza√ß√£o cancelada."
        exit 1
    fi
else
    echo "  ‚úÖ Nenhum processo relacionado em execu√ß√£o"
fi

# Verificar permiss√µes
echo
echo "Verificando permiss√µes..."
if [ -w . ]; then
    echo "  ‚úÖ Permiss√£o de escrita no diret√≥rio atual"
else
    echo "  ‚ùå ERRO: Sem permiss√£o de escrita no diret√≥rio atual"
    exit 1
fi

# Verificar se j√° existe alguma estrutura organizada
echo
echo "Verificando estrutura existente..."
if [ -d "src" ] || [ -d "scripts" ] || [ -d "models" ]; then
    echo "  ‚ö†Ô∏è  ATEN√á√ÉO: Detectada estrutura organizada existente:"
    [ -d "src" ] && echo "    - src/ (j√° existe)"
    [ -d "scripts" ] && echo "    - scripts/ (j√° existe)"
    [ -d "models" ] && echo "    - models/ (j√° existe)"
    echo
    read -p "Isso pode causar conflitos. Deseja fazer backup e continuar? (s/n): " -r
    if [[ $REPLY =~ ^[Ss]$ ]]; then
        echo "  Fazendo backup da estrutura existente..."
        backup_dir="backup_estrutura_$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$backup_dir"
        [ -d "src" ] && mv src "$backup_dir/"
        [ -d "scripts" ] && mv scripts "$backup_dir/"
        [ -d "models" ] && mv models "$backup_dir/"
        [ -d "data" ] && mv data "$backup_dir/"
        [ -d "docs" ] && mv docs "$backup_dir/"
        [ -d "logs" ] && mv logs "$backup_dir/"
        [ -d "config" ] && mv config "$backup_dir/"
        [ -d "tests" ] && mv tests "$backup_dir/"
        echo "  ‚úÖ Backup criado em: $backup_dir"
    else
        echo "Reorganiza√ß√£o cancelada."
        exit 1
    fi
else
    echo "  ‚úÖ Nenhuma estrutura organizada detectada"
fi

# Resumo final
echo
echo "RESUMO DA VERIFICA√á√ÉO"
echo "===================="
echo "‚úÖ Diret√≥rio correto"
echo "‚úÖ Permiss√µes adequadas"
echo "‚úÖ Espa√ßo em disco suficiente"
echo "‚úÖ Arquivos cr√≠ticos verificados"
echo "‚úÖ Estrutura limpa para reorganiza√ß√£o"
echo
echo "üéØ TUDO PRONTO PARA REORGANIZA√á√ÉO!"
echo
echo "Para executar a reorganiza√ß√£o:"
echo "  ./reorganizar_estrutura.sh"
echo
echo "A reorganiza√ß√£o ir√°:"
echo "  üìÅ Criar estrutura organizada de diret√≥rios"
echo "  üì¶ Mover arquivos para pastas espec√≠ficas"
echo "  üîß Atualizar alzheimer_analysis_suite.sh"
echo "  üìã Criar documenta√ß√£o da nova estrutura"
echo "  üíæ Fazer backup do arquivo original"
echo
read -p "Deseja executar a reorganiza√ß√£o agora? (s/n): " -r
if [[ $REPLY =~ ^[Ss]$ ]]; then
    echo
    echo "Executando reorganiza√ß√£o..."
    ./reorganizar_estrutura.sh
else
    echo
    echo "Reorganiza√ß√£o n√£o executada."
    echo "Execute manualmente quando estiver pronto:"
    echo "  ./reorganizar_estrutura.sh"
fi
