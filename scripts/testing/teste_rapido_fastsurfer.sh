#!/bin/bash

echo "=== TESTE R√ÅPIDO DO FASTSURFER ==="
echo "‚è±Ô∏è  $(date)"

# Configura√ß√µes
SUBJECT_DIR="/app/alzheimer/oasis_data/disc1/OAS1_0001_MR1"
OUTPUT_DIR="/app/alzheimer/oasis_data/test_rapido_fastsurfer"
LOG_DIR="/app/alzheimer/oasis_data/test_logs_rapido"
LICENSE_FILE="./freesurfer_license_oficial.txt"

# Criar diret√≥rios
mkdir -p "$OUTPUT_DIR" "$LOG_DIR"

# Verificar se o sujeito existe
if [ ! -d "$SUBJECT_DIR" ]; then
    echo "‚ùå Sujeito n√£o encontrado: $SUBJECT_DIR"
    exit 1
fi

# Verificar se o arquivo T1.mgz existe
if [ ! -f "$SUBJECT_DIR/mri/T1.mgz" ]; then
    echo "‚ùå Arquivo T1.mgz n√£o encontrado: $SUBJECT_DIR/mri/T1.mgz"
    exit 1
fi

# Verificar licen√ßa
if [ ! -f "$LICENSE_FILE" ]; then
    echo "‚ùå Licen√ßa n√£o encontrada: $LICENSE_FILE"
    exit 1
fi

echo "‚úÖ Configura√ß√£o verificada:"
echo "   üìÅ Sujeito: $SUBJECT_DIR"
echo "   üìÑ T1.mgz: $(ls -lh "$SUBJECT_DIR/mri/T1.mgz" | awk '{print $5}')"
echo "   üìÇ Output: $OUTPUT_DIR"
echo "   üìù Logs: $LOG_DIR"
echo "   üîë Licen√ßa: $LICENSE_FILE"

# Verificar se Docker est√° funcionando
echo ""
echo "üê≥ Verificando Docker..."
if ! docker --version >/dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° funcionando"
    exit 1
fi

echo "‚úÖ Docker est√° funcionando"

# Verificar se a imagem FastSurfer existe
echo ""
echo "üîç Verificando imagem FastSurfer..."
if ! docker images | grep -q "deepmi/fastsurfer"; then
    echo "‚ö†Ô∏è  Imagem FastSurfer n√£o encontrada, baixando..."
    docker pull deepmi/fastsurfer:latest
fi

echo "‚úÖ Imagem FastSurfer dispon√≠vel"

# Executar teste
echo ""
echo "üöÄ INICIANDO TESTE DO FASTSURFER..."
echo "‚è±Ô∏è  In√≠cio: $(date)"

SUBJECT_ID="OAS1_0001_MR1"
LOG_FILE="$LOG_DIR/${SUBJECT_ID}_teste_rapido.log"

echo "üìã Executando comando:"
echo "docker run --rm \\"
echo "  -v \"$SUBJECT_DIR:/input\" \\"
echo "  -v \"$OUTPUT_DIR:/output\" \\"
echo "  -v \"$LICENSE_FILE:/fs_license/license.txt\" \\"
echo "  deepmi/fastsurfer:latest \\"
echo "  --fs_license /fs_license/license.txt \\"
echo "  --t1 /input/mri/T1.mgz \\"
echo "  --sid \"$SUBJECT_ID\" \\"
echo "  --sd /output \\"
echo "  --threads 2 \\"
echo "  --parallel"

echo ""
echo "üîÑ Processando (isso pode demorar 20-30 minutos)..."

# Configurar usu√°rio Docker
USER_ID=$(id -u)
GROUP_ID=$(id -g)
echo "üîß Configura√ß√£o Docker: User ID: $USER_ID, Group ID: $GROUP_ID"

# Criar diret√≥rio tempor√°rio e copiar arquivo
TEMP_DIR="/tmp/fastsurfer_test_$$"
mkdir -p "$TEMP_DIR"

echo "üìã Copiando arquivo T1.mgz para diret√≥rio tempor√°rio..."
if ! cp "$SUBJECT_DIR/mri/T1.mgz" "$TEMP_DIR/T1.mgz"; then
    echo "‚ùå Falha ao copiar arquivo T1.mgz"
    rm -rf "$TEMP_DIR"
    exit 1
fi

# Executar FastSurfer (CONFIGURA√á√ÉO CORRIGIDA)
docker run --rm \
    --user "$USER_ID:$GROUP_ID" \
    -v "$TEMP_DIR:/input" \
    -v "$OUTPUT_DIR:/output" \
    -v "$LICENSE_FILE:/license.txt" \
    deepmi/fastsurfer:latest \
    --fs_license /license.txt \
    --t1 /input/T1.mgz \
    --sid "$SUBJECT_ID" \
    --sd /output \
    --threads 2 \
    --device cpu \
    --py python3 \
    > "$LOG_FILE" 2>&1

EXIT_CODE=$?

# Limpar arquivo tempor√°rio
rm -rf "$TEMP_DIR"

echo ""
echo "‚è±Ô∏è  Fim: $(date)"
echo "üîç Exit code: $EXIT_CODE"

# Verificar resultado
if [ $EXIT_CODE -eq 0 ]; then
    echo ""
    echo "‚úÖ TESTE CONCLU√çDO COM SUCESSO!"
    
    # Verificar se os arquivos foram criados
    RESULT_DIR="$OUTPUT_DIR/$SUBJECT_ID"
    if [ -d "$RESULT_DIR" ]; then
        echo ""
        echo "üìÇ RESULTADOS GERADOS:"
        echo "   üìÅ Diret√≥rio: $RESULT_DIR"
        echo "   üìä Arquivos totais: $(find "$RESULT_DIR" -type f | wc -l)"
        echo "   üíæ Tamanho total: $(du -sh "$RESULT_DIR" | cut -f1)"
        
        # Verificar arquivos importantes
        echo ""
        echo "üîç ARQUIVOS IMPORTANTES:"
        if [ -f "$RESULT_DIR/stats/aseg.stats" ]; then
            echo "   ‚úÖ aseg.stats: $(ls -lh "$RESULT_DIR/stats/aseg.stats" | awk '{print $5}')"
        else
            echo "   ‚ùå aseg.stats: N√ÉO ENCONTRADO"
        fi
        
        if [ -f "$RESULT_DIR/mri/aparc+aseg.mgz" ]; then
            echo "   ‚úÖ aparc+aseg.mgz: $(ls -lh "$RESULT_DIR/mri/aparc+aseg.mgz" | awk '{print $5}')"
        else
            echo "   ‚ùå aparc+aseg.mgz: N√ÉO ENCONTRADO"
        fi
        
        if [ -d "$RESULT_DIR/surf" ]; then
            surf_count=$(ls "$RESULT_DIR/surf" | wc -l)
            echo "   ‚úÖ Superf√≠cies: $surf_count arquivos"
        else
            echo "   ‚ùå Superf√≠cies: DIRET√ìRIO N√ÉO ENCONTRADO"
        fi
        
        echo ""
        echo "üéâ TESTE COMPLETAMENTE FUNCIONAL!"
        echo "üí° O FastSurfer est√° funcionando corretamente"
        echo "‚ö° Agora voc√™ pode usar o processamento em lote"
        
    else
        echo ""
        echo "‚ö†Ô∏è  PROCESSAMENTO CONCLU√çDO mas diret√≥rio n√£o encontrado"
        echo "üîç Verificando outros locais..."
        find "$OUTPUT_DIR" -name "*$SUBJECT_ID*" -type d 2>/dev/null || echo "   ‚ùå Nenhum resultado encontrado"
    fi
else
    echo ""
    echo "‚ùå TESTE FALHOU (c√≥digo: $EXIT_CODE)"
    echo ""
    echo "üìã √öLTIMAS LINHAS DO LOG:"
    echo "----------------------------------------"
    tail -20 "$LOG_FILE"
    echo "----------------------------------------"
fi

echo ""
echo "üìù Log completo salvo em: $LOG_FILE"
echo ""
echo "=== FIM DO TESTE R√ÅPIDO ===" 