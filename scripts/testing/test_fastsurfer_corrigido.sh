#!/bin/bash

echo "=== Teste FastSurfer - VERS√ÉO CORRIGIDA (VOLUMES) ==="

# Configura√ß√µes
DATA_BASE="/app/alzheimer/oasis_data"
OUTPUT_DIR="${DATA_BASE}/test_fastsurfer_corrigido"
LOG_DIR="${DATA_BASE}/test_logs_corrigido"

# Criar diret√≥rios
mkdir -p "$OUTPUT_DIR" "$LOG_DIR"

# Selecionar primeiro sujeito dispon√≠vel
TEST_SUBJECT=""
for disc in {1..11}; do
    DISK_DIR="${DATA_BASE}/disc${disc}"
    if [ -d "$DISK_DIR" ]; then
        for subject_dir in "${DISK_DIR}"/OAS1_*_MR1; do
            if [ -d "$subject_dir" ] && [ -f "${subject_dir}/mri/T1.mgz" ]; then
                TEST_SUBJECT="$subject_dir"
                break 2
            fi
        done
    fi
done

if [ -z "$TEST_SUBJECT" ]; then
    echo "‚ùå Nenhum sujeito com T1.mgz encontrado!"
    exit 1
fi

SUBJECT_ID=$(basename "$TEST_SUBJECT")
echo "üìã Testando com sujeito: $SUBJECT_ID"
echo "üìÅ Diret√≥rio: $TEST_SUBJECT"
echo "üìÅ Sa√≠da: $OUTPUT_DIR"

# Verificar arquivo T1 - DIAGN√ìSTICO DETALHADO
T1_FILE="${TEST_SUBJECT}/mri/T1.mgz"
echo ""
echo "üîç DIAGN√ìSTICO DO ARQUIVO T1:"
echo "üìÅ Caminho: $T1_FILE"

if [ -L "$T1_FILE" ]; then
    echo "üîó TIPO: Link simb√≥lico"
    echo "üéØ Destino: $(readlink -f "$T1_FILE")"
    REAL_T1_FILE=$(readlink -f "$T1_FILE")
else
    echo "üìÑ TIPO: Arquivo regular"
    REAL_T1_FILE="$T1_FILE"
fi

echo "üìä Tamanho: $(du -h "$REAL_T1_FILE" | cut -f1)"
echo "‚úÖ Arquivo T1 verificado"

# Usar licen√ßa oficial
LICENSE_FILE="./freesurfer_license_oficial.txt"
echo "‚úÖ Licen√ßa oficial: $LICENSE_FILE"

# Limpar teste anterior
rm -rf "${OUTPUT_DIR}/${SUBJECT_ID}_corrigido"

echo ""
echo "üöÄ TESTANDO FASTSURFER (MAPEAMENTO CORRIGIDO)..."
echo "‚è±Ô∏è  In√≠cio: $(date)"

# SOLU√á√ÉO: Mapear diret√≥rio pai inteiro para evitar problemas de links simb√≥licos
USER_ID=$(id -u)
GROUP_ID=$(id -g)

echo "üîß User ID: $USER_ID, Group ID: $GROUP_ID"
echo "üóÇÔ∏è  Mapeando diret√≥rio base: $DATA_BASE"

# ESTRAT√âGIA 1: Mapear todo o diret√≥rio base
echo ""
echo "üìÇ ESTRAT√âGIA 1: Mapeamento completo do diret√≥rio base"

docker run --rm \
    --user "$USER_ID:$GROUP_ID" \
    -v "${DATA_BASE}:/data" \
    -v "${OUTPUT_DIR}:/output" \
    -v "${LICENSE_FILE}:/license.txt" \
    deepmi/fastsurfer:latest \
    --fs_license /license.txt \
    --t1 "/data/disc1/${SUBJECT_ID}/mri/T1.mgz" \
    --sid "${SUBJECT_ID}_corrigido" \
    --sd /output \
    --threads 4 \
    --device cpu \
    2>&1 | tee "${LOG_DIR}/${SUBJECT_ID}_corrigido.log"

EXIT_CODE_1=$?

echo ""
echo "üîç Resultado Estrat√©gia 1: $EXIT_CODE_1"

# Se falhar, tentar ESTRAT√âGIA 2: Copiar arquivo localmente
if [ $EXIT_CODE_1 -ne 0 ]; then
    echo ""
    echo "üìÇ ESTRAT√âGIA 2: C√≥pia local do arquivo T1"
    
    # Criar diret√≥rio tempor√°rio
    TEMP_DIR="/tmp/fastsurfer_test_$$"
    mkdir -p "$TEMP_DIR"
    
    # Copiar arquivo T1 para local tempor√°rio
    cp "$REAL_T1_FILE" "$TEMP_DIR/T1.mgz"
    
    echo "üìã Arquivo copiado para: $TEMP_DIR/T1.mgz"
    echo "üìä Tamanho: $(du -h "$TEMP_DIR/T1.mgz" | cut -f1)"
    
    docker run --rm \
        --user "$USER_ID:$GROUP_ID" \
        -v "${TEMP_DIR}:/input" \
        -v "${OUTPUT_DIR}:/output" \
        -v "${LICENSE_FILE}:/license.txt" \
        deepmi/fastsurfer:latest \
        --fs_license /license.txt \
        --t1 /input/T1.mgz \
        --sid "${SUBJECT_ID}_corrigido2" \
        --sd /output \
        --threads 4 \
        --device cpu \
        2>&1 | tee "${LOG_DIR}/${SUBJECT_ID}_corrigido2.log"
    
    EXIT_CODE_2=$?
    
    # Limpar arquivo tempor√°rio
    rm -rf "$TEMP_DIR"
    
    echo ""
    echo "üîç Resultado Estrat√©gia 2: $EXIT_CODE_2"
    
    FINAL_EXIT_CODE=$EXIT_CODE_2
    FINAL_RESULT_DIR="${OUTPUT_DIR}/${SUBJECT_ID}_corrigido2"
else
    FINAL_EXIT_CODE=$EXIT_CODE_1
    FINAL_RESULT_DIR="${OUTPUT_DIR}/${SUBJECT_ID}_corrigido"
fi

echo ""
echo "‚è±Ô∏è  Fim: $(date)"
echo "üîç Exit code final: $FINAL_EXIT_CODE"

# Verificar resultado
if [ $FINAL_EXIT_CODE -eq 0 ] && [ -d "$FINAL_RESULT_DIR" ]; then
    echo ""
    echo "‚úÖ TESTE CORRIGIDO: SUCESSO!"
    echo "üìÅ Resultados em: $FINAL_RESULT_DIR"
    
    # Verificar estrutura
    echo ""
    echo "üìä ARQUIVOS GERADOS:"
    
    # Contar arquivos por tipo
    mri_count=$(find "$FINAL_RESULT_DIR" -name "*.mgz" 2>/dev/null | wc -l)
    stats_count=$(find "$FINAL_RESULT_DIR" -name "*.stats" 2>/dev/null | wc -l)
    surf_count=$(find "$FINAL_RESULT_DIR" -name "*.surf" -o -name "lh.*" -o -name "rh.*" 2>/dev/null | wc -l)
    
    echo "  üìà Arquivos MRI (.mgz): $mri_count"
    echo "  üìä Arquivos Stats: $stats_count"
    echo "  üß† Arquivos Surface: $surf_count"
    
    # Verificar arquivos chave
    echo ""
    echo "üîç VALIDA√á√ÉO DOS ARQUIVOS PRINCIPAIS:"
    
    if [ -f "$FINAL_RESULT_DIR/stats/aseg.stats" ]; then
        echo "  ‚úÖ aseg.stats: $(du -h "$FINAL_RESULT_DIR/stats/aseg.stats" | cut -f1)"
    else
        echo "  ‚ùå aseg.stats: AUSENTE"
    fi
    
    if [ -f "$FINAL_RESULT_DIR/mri/aparc+aseg.mgz" ]; then
        echo "  ‚úÖ aparc+aseg.mgz: $(du -h "$FINAL_RESULT_DIR/mri/aparc+aseg.mgz" | cut -f1)"
    else
        echo "  ‚ö†Ô∏è  aparc+aseg.mgz: AUSENTE (pode estar em processamento)"
    fi
    
    if [ -f "$FINAL_RESULT_DIR/mri/T1.mgz" ]; then
        echo "  ‚úÖ T1.mgz: $(du -h "$FINAL_RESULT_DIR/mri/T1.mgz" | cut -f1)"
    fi
    
    # Mostrar estrutura de diret√≥rios
    echo ""
    echo "üìÇ ESTRUTURA DE DIRET√ìRIOS:"
    find "$FINAL_RESULT_DIR" -type d | head -10 | sed 's|^|  |'
    
    echo ""
    echo "üéâ FASTSURFER FUNCIONANDO PERFEITAMENTE!"
    echo "‚ö° Problema de mapeamento de volumes resolvido!"
    echo "üí° Pronto para processar todos os sujeitos!"
    
elif [ $FINAL_EXIT_CODE -eq 0 ]; then
    echo "‚ö†Ô∏è  PROCESSAMENTO CONCLU√çDO mas diret√≥rio n√£o encontrado"
    echo "üîç Verificando todos os locais..."
    find "$OUTPUT_DIR" -name "*$SUBJECT_ID*" -type d 2>/dev/null | head -10
    
else
    echo "‚ùå TESTE FALHOU (c√≥digo: $FINAL_EXIT_CODE)"
    echo ""
    echo "üìã DIAGN√ìSTICO COMPLETO:"
    
    # Mostrar logs de ambas as estrat√©gias
    echo ""
    echo "üìÑ LOG ESTRAT√âGIA 1 (√∫ltimas 10 linhas):"
    if [ -f "${LOG_DIR}/${SUBJECT_ID}_corrigido.log" ]; then
        tail -10 "${LOG_DIR}/${SUBJECT_ID}_corrigido.log"
    fi
    
    if [ $EXIT_CODE_1 -ne 0 ] && [ -f "${LOG_DIR}/${SUBJECT_ID}_corrigido2.log" ]; then
        echo ""
        echo "üìÑ LOG ESTRAT√âGIA 2 (√∫ltimas 10 linhas):"
        tail -10 "${LOG_DIR}/${SUBJECT_ID}_corrigido2.log"
    fi
    
    echo ""
    echo "üîß POSS√çVEIS SOLU√á√ïES:"
    echo "1. Verificar se Docker tem acesso ao diret√≥rio"
    echo "2. Tentar como root: --user root"
    echo "3. Verificar espa√ßo em disco: df -h"
    echo "4. Testar FreeSurfer nativo: ./test_freesurfer_nativo.sh"
fi

echo ""
echo "üìù Logs salvos em: ${LOG_DIR}/"
echo ""
echo "=== FIM DO TESTE CORRIGIDO ===" 