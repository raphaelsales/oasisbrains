#!/bin/bash

echo "=== Teste FastSurfer - SOLU√á√ÉO GIT ANNEX ==="

# Configura√ß√µes
DATA_BASE="/app/alzheimer/oasis_data"
OUTPUT_DIR="${DATA_BASE}/test_fastsurfer_annex"
LOG_DIR="${DATA_BASE}/test_logs_annex"
ANNEX_DIR="/app/alzheimer/.git/annex/objects"

# Criar diret√≥rios
mkdir -p "$OUTPUT_DIR" "$LOG_DIR"

# Selecionar primeiro sujeito dispon√≠vel
TEST_SUBJECT=""
for disc in {1..11}; do
    DISK_DIR="${DATA_BASE}/disc${disc}"
    if [ -d "$DISK_DIR" ]; then
        for subject_dir in "${DISK_DIR}"/OAS1_*_MR1; do
            if [ -d "$subject_dir" ] && [ -f "${subject_dir}/mri/T1.mgz" ]; then
                TEST_SUBJECT="$subject_dir"
                break 2
            fi
        done
    fi
done

if [ -z "$TEST_SUBJECT" ]; then
    echo "‚ùå Nenhum sujeito com T1.mgz encontrado!"
    exit 1
fi

SUBJECT_ID=$(basename "$TEST_SUBJECT")
echo "üìã Testando com sujeito: $SUBJECT_ID"
echo "üìÅ Diret√≥rio: $TEST_SUBJECT"
echo "üìÅ Sa√≠da: $OUTPUT_DIR"

# DIAGN√ìSTICO COMPLETO DO GIT ANNEX
T1_FILE="${TEST_SUBJECT}/mri/T1.mgz"
echo ""
echo "üîç DIAGN√ìSTICO GIT ANNEX:"
echo "üìÅ Arquivo: $T1_FILE"

# Verificar se √© link simb√≥lico
if [ -L "$T1_FILE" ]; then
    echo "üîó CONFIRMADO: √â um link simb√≥lico"
    LINK_TARGET=$(readlink "$T1_FILE")
    echo "üéØ Link aponta para: $LINK_TARGET"
    
    # Resolver caminho absoluto
    REAL_FILE=$(readlink -f "$T1_FILE")
    echo "üìÑ Arquivo real: $REAL_FILE"
    
    # Verificar se est√° no Git Annex
    if [[ "$REAL_FILE" == *".git/annex/objects"* ]]; then
        echo "‚úÖ CONFIRMADO: Arquivo est√° no Git Annex"
        echo "üìÇ Diret√≥rio Annex: $ANNEX_DIR"
        
        # Verificar se diret√≥rio annex existe
        if [ -d "$ANNEX_DIR" ]; then
            echo "‚úÖ Diret√≥rio Git Annex encontrado"
            echo "üìä Tamanho do arquivo real: $(du -h "$REAL_FILE" | cut -f1)"
        else
            echo "‚ùå Diret√≥rio Git Annex n√£o encontrado: $ANNEX_DIR"
        fi
    else
        echo "‚ö†Ô∏è  Arquivo n√£o est√° no Git Annex"
    fi
else
    echo "üìÑ Arquivo regular (n√£o √© link simb√≥lico)"
    REAL_FILE="$T1_FILE"
fi

# Usar licen√ßa oficial
LICENSE_FILE="./freesurfer_license_oficial.txt"
echo "‚úÖ Licen√ßa oficial: $LICENSE_FILE"

# Limpar teste anterior
rm -rf "${OUTPUT_DIR}/${SUBJECT_ID}_annex"

echo ""
echo "üöÄ TESTANDO FASTSURFER (SOLU√á√ÉO GIT ANNEX)..."
echo "‚è±Ô∏è  In√≠cio: $(date)"

USER_ID=$(id -u)
GROUP_ID=$(id -g)

echo "üîß User ID: $USER_ID, Group ID: $GROUP_ID"

# ESTRAT√âGIA DEFINITIVA: Mapear todos os diret√≥rios necess√°rios
echo ""
echo "üìÇ ESTRAT√âGIA: Mapeamento completo incluindo Git Annex"

# Verificar se precisa mapear Git Annex
if [ -d "$ANNEX_DIR" ]; then
    echo "üóÇÔ∏è  Mapeando Git Annex: $ANNEX_DIR"
    
    docker run --rm \
        --user "$USER_ID:$GROUP_ID" \
        -v "${DATA_BASE}:/data" \
        -v "${ANNEX_DIR}:/annex" \
        -v "${OUTPUT_DIR}:/output" \
        -v "${LICENSE_FILE}:/license.txt" \
        deepmi/fastsurfer:latest \
        --fs_license /license.txt \
        --t1 "/data/disc1/${SUBJECT_ID}/mri/T1.mgz" \
        --sid "${SUBJECT_ID}_annex" \
        --sd /output \
        --threads 4 \
        --device cpu \
        2>&1 | tee "${LOG_DIR}/${SUBJECT_ID}_annex.log"
    
    EXIT_CODE=$?
    
else
    echo "‚ö†Ô∏è  Git Annex n√£o encontrado, usando estrat√©gia de c√≥pia"
    
    # FALLBACK: Copiar arquivo real para local tempor√°rio
    TEMP_DIR="/tmp/fastsurfer_annex_$$"
    mkdir -p "$TEMP_DIR"
    
    echo "üìã Copiando arquivo real para: $TEMP_DIR/T1.mgz"
    cp "$REAL_FILE" "$TEMP_DIR/T1.mgz"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Arquivo copiado com sucesso"
        echo "üìä Tamanho: $(du -h "$TEMP_DIR/T1.mgz" | cut -f1)"
        
        docker run --rm \
            --user "$USER_ID:$GROUP_ID" \
            -v "${TEMP_DIR}:/input" \
            -v "${OUTPUT_DIR}:/output" \
            -v "${LICENSE_FILE}:/license.txt" \
            deepmi/fastsurfer:latest \
            --fs_license /license.txt \
            --t1 /input/T1.mgz \
            --sid "${SUBJECT_ID}_annex" \
            --sd /output \
            --threads 4 \
            --device cpu \
            2>&1 | tee "${LOG_DIR}/${SUBJECT_ID}_annex.log"
        
        EXIT_CODE=$?
        
        # Limpar arquivo tempor√°rio
        rm -rf "$TEMP_DIR"
    else
        echo "‚ùå Falha ao copiar arquivo"
        EXIT_CODE=1
    fi
fi

echo ""
echo "‚è±Ô∏è  Fim: $(date)"
echo "üîç Exit code: $EXIT_CODE"

# Verificar resultado
RESULT_DIR="${OUTPUT_DIR}/${SUBJECT_ID}_annex"

if [ $EXIT_CODE -eq 0 ] && [ -d "$RESULT_DIR" ]; then
    echo ""
    echo "‚úÖ TESTE GIT ANNEX: SUCESSO!"
    echo "üìÅ Resultados em: $RESULT_DIR"
    
    # Verificar estrutura
    echo ""
    echo "üìä ARQUIVOS GERADOS:"
    
    # Contar arquivos por tipo
    mri_count=$(find "$RESULT_DIR" -name "*.mgz" 2>/dev/null | wc -l)
    stats_count=$(find "$RESULT_DIR" -name "*.stats" 2>/dev/null | wc -l)
    surf_count=$(find "$RESULT_DIR" -name "*.surf" -o -name "lh.*" -o -name "rh.*" 2>/dev/null | wc -l)
    
    echo "  üìà Arquivos MRI (.mgz): $mri_count"
    echo "  üìä Arquivos Stats: $stats_count"
    echo "  üß† Arquivos Surface: $surf_count"
    
    # Verificar arquivos chave
    echo ""
    echo "üîç VALIDA√á√ÉO DOS ARQUIVOS PRINCIPAIS:"
    
    if [ -f "$RESULT_DIR/stats/aseg.stats" ]; then
        echo "  ‚úÖ aseg.stats: $(du -h "$RESULT_DIR/stats/aseg.stats" | cut -f1)"
    else
        echo "  ‚ùå aseg.stats: AUSENTE"
    fi
    
    if [ -f "$RESULT_DIR/mri/aparc+aseg.mgz" ]; then
        echo "  ‚úÖ aparc+aseg.mgz: $(du -h "$RESULT_DIR/mri/aparc+aseg.mgz" | cut -f1)"
    else
        echo "  ‚ö†Ô∏è  aparc+aseg.mgz: AUSENTE (pode estar em processamento)"
    fi
    
    if [ -f "$RESULT_DIR/mri/T1.mgz" ]; then
        echo "  ‚úÖ T1.mgz: $(du -h "$RESULT_DIR/mri/T1.mgz" | cut -f1)"
    fi
    
    # Mostrar estrutura de diret√≥rios
    echo ""
    echo "üìÇ ESTRUTURA DE DIRET√ìRIOS:"
    find "$RESULT_DIR" -type d | head -10 | sed 's|^|  |'
    
    echo ""
    echo "üéâ PROBLEMA DO GIT ANNEX RESOLVIDO!"
    echo "‚úÖ FastSurfer funcionando com links simb√≥licos!"
    echo "üí° Pronto para processar todos os sujeitos!"
    
elif [ $EXIT_CODE -eq 0 ]; then
    echo "‚ö†Ô∏è  PROCESSAMENTO CONCLU√çDO mas diret√≥rio n√£o encontrado"
    echo "üîç Verificando todos os locais..."
    find "$OUTPUT_DIR" -name "*$SUBJECT_ID*" -type d 2>/dev/null | head -10
    
else
    echo "‚ùå TESTE FALHOU (c√≥digo: $EXIT_CODE)"
    echo ""
    echo "üìã DIAGN√ìSTICO:"
    
    # Mostrar √∫ltimas linhas do log
    if [ -f "${LOG_DIR}/${SUBJECT_ID}_annex.log" ]; then
        echo "üìÑ √öltimas 15 linhas do log:"
        echo "----------------------------------------"
        tail -15 "${LOG_DIR}/${SUBJECT_ID}_annex.log"
        echo "----------------------------------------"
    fi
    
    echo ""
    echo "üîß SOLU√á√ïES ALTERNATIVAS:"
    echo "1. Usar 'git annex unlock' para converter links em arquivos"
    echo "2. Usar 'git annex get' para baixar arquivos"
    echo "3. Testar FreeSurfer nativo: ./test_freesurfer_nativo.sh"
    echo "4. Verificar permiss√µes do Git Annex"
fi

echo ""
echo "üìù Log completo salvo em: ${LOG_DIR}/${SUBJECT_ID}_annex.log"
echo ""
echo "=== FIM DO TESTE GIT ANNEX ==="

# BONUS: Mostrar comandos √∫teis do Git Annex
echo ""
echo "üîß COMANDOS √öTEIS DO GIT ANNEX:"
echo "   git annex whereis T1.mgz    # Ver onde est√° o arquivo"
echo "   git annex unlock T1.mgz     # Converter link em arquivo"
echo "   git annex get T1.mgz        # Baixar arquivo"
echo "   git annex status            # Ver status do reposit√≥rio" 